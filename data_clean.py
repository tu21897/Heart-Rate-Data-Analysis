import pandas as pd
import numpy as np

#
# Merges all relevant data, deletes the rest, stores the results in water.data.merged_cleaned.csv
#

# The read csv file
read = 'raw_hr_hr.csv'
# The write csv file
write = 'cleaned_raw_hr_hr.csv'
# The csv file with as a data frame
df = pd.read_csv(read)
# Suppress numpy float sci form
np.set_printoptions(suppress=True)
# Debug statistics, ex. cols removed, added, etc.
DEBUG_STATS_FLAG = True

def main():
    # resulting merged & cleaned data frame
    dest_map = {}

    # Dimension data
    dimensions = np.array(['state_name', 'county_nm', 'year'])
    dest_map.update({dimensions[i]:df[dimensions[i]] for i in range(3)})

    # Misc measure data
    dest_map.update({'Total Population':conv_col_to_float(df['Total Population'])})

    # Waste Treatment data
    wt_keep = np.array(['WT reclaimed wastewater released by wastewater facilities','WT number of wastewater facilities','WT number of public wastewater facilities',
                        'WT returns by public wastewater facilities', 'WT reclaimed wastewater released by public wastewater facilities'])
    wt_map = {}
    dest_map.update(merge(wt_keep, wt_map))

    # Hydroelectric Power data
    hp_keep = np.array(['HP instream use'])
    hp_map = {'HP total number of facilities':['HP number of offstream facilities','HP number of instream facilities'],
                'HP total power generated':['HP power generated by offstream use','HP power generated by instream use'],
                    'HP total offstream surface-water withdrawals':['HP surface s-s offstream withdrawals','HP offstream surface-water withdrawals']}
    dest_map.update(merge(hp_keep, hp_map))

    # Irrigation data
    irr_keep = np.array(['Ir Total reclaimed wastewater', 'Ir Total conveyance loss'])
    irr_map = {'Ir Total total irrigation':['Ir Total surface irrigation', 'Ir Total microirrigation', 'Ir Total sprinkler irrigation'],
                    'Ir Total total consumptive use':['Ir Total consumptive use.1', 'Ir Total consumptive use'],
                        'Ir Total total s-s withdrawals':['Ir Total s-s surface-water withdrawals.1', 'Ir Total s-s surface-water withdrawals',
                                                            'Ir Total s-s groundwater withdrawals.1', 'Ir Total s-s groundwater withdrawals']}
    dest_map.update(merge(irr_keep, irr_map))

    # Aquaculture data
    a_keep = np.array([])
    a_map = {'A total consumptive use':['A consumptive use.1','A consumptive use'],
                'A total s-s withdrawals':['A s-s surface-water withdrawals.1', 'A s-s surface-water withdrawals',
                                            'A s-s groundwater withdrawals.1', 'A s-s groundwater withdrawals']}
    dest_map.update(merge(a_keep, a_map))

    # Livestock data
    l_keep = np.array([])
    l_map = {'L consumptive use': ['L (Animal Specialties) consumptive use.1', 'L (Animal Specialties) consumptive use',
                                    'L (Stock) consumptive use.1', 'L (Stock) consumptive use'],
                'L total s-s withdrawals': ['L (Animal Specialties) s-s surface-water withdrawals.1', 'L (Animal Specialties) s-s surface-water withdrawals',
                                             'L (Animal Specialties) s-s groundwater withdrawals.1', 'L (Animal Specialties) s-s groundwater withdrawals',
                                              'L (Stock) s-s surface-water withdrawals.1', 'L (Stock) s-s surface-water withdrawals',
                                               'L (Stock) s-s groundwater withdrawals.1', 'L (Stock) s-s groundwater withdrawals']}
    dest_map.update(merge(l_keep, l_map))

    # Mining data
    m_keep = np.array(['M reclaimed wastewater'])
    m_map = {'M total consumptive use':['M consumptive use.1', 'M consumptive use'],
                'M total s-s withdrawals':['M s-s surface-water withdrawals.1', 'M s-s surface-water withdrawals',
                                            'M s-s groundwater withdrawals.1', 'M s-s groundwater withdrawals']}
    dest_map.update(merge(m_keep, m_map))

    
    # Drop all columns with no data
    dest_df = drop_zero_cols(pd.DataFrame.from_dict(dest_map))

    # Output merged & cleaned dataframe to csv file
    dest_df.to_csv(write, float_format='%.3f', index=False)

    # Debug statistics
    if (DEBUG_STATS_FLAG):
        debug_stats(dest_df)


# Prints debug stats on cols removed, added, etc. to console
# Outputs the removed column names to water_data_removed_column_names.txt
# dest_df - the data frame compared to the original data frame
def debug_stats(dest_df):
    print(dest_df)
    num_col_df = len(df.columns)
    num_col_dest_df = len(dest_df.columns)
    rm_file_name = 'water_data_removed_column_names.txt'
    removedCols = set(df.columns).symmetric_difference(set(df.columns).intersection(set(dest_df.columns)))
    num_col_rmcol = len(removedCols)
    rm_file = open(rm_file_name, 'w')
    for cname in removedCols:
        rm_file.write(cname + '\n')
    rm_file.close() 
    debug_stats_helper(read, num_col_df, write, num_col_dest_df, num_col_rmcol, rm_file_name)

# Drops all columns with all zero values from a data frame
# dest_df - the data frame being modified
def drop_zero_cols(dest_df):
    booldf = (dest_df == 0.0)
    zero_cols = (booldf.loc[:, booldf.all(axis=0.0)].columns).to_numpy()
    for col in zero_cols:
        dest_df.drop(col, axis=1, inplace=True)
    return dest_df

# takes in an np arr of column names
# returns an np arr of float converted columns
def cols_to_conv_np(cols):
    return np.array([conv_col_to_float(df[cols[i]]) for i in range(len(cols))])

# Takes in a column, converts column values to float, zeroes out missing values
# col - the input column 
# returns an np array of the col
def conv_col_to_float(col):
    # print([ord(c) for c in c1[i]])
    c_arr = col.to_numpy()
    return np.array([0.00 if (str(c_arr[i])[0] == str(chr(45))) else float(c_arr[i]) for i in range(len(col))])

# keeps select columns, merges select columns
# keepCols - an np array of column names to keep
# mergeCols - a map of new col names to an array of column names to merge
# Returns a map of new columns to names
def merge(keepCols, mergeCols):
    # sorry
    colMap = {{} if (len(keepCols) == 0) else keepCols[i]:conv_col_to_float(df[keepCols[i]]) for i in range(len(keepCols))}
    if (mergeCols):
        colMap.update({k:merge_cols(cols_to_conv_np(mergeCols[k])) for k in mergeCols.keys()})
    return colMap

# Takes in columns as np arrays and merges 
# --column data values must be of type float--
# cols - np array of columns being merged
# returns a map of name to col
def merge_cols(cols):
    return np.sum(cols, axis = 0)

# prints out the column headers in reversed order
# header - np array of the column headers
def print_col_reversed(header):
    for i in reversed(range(len(header))):
        print(header[i])

# prints out the column headers in reversed order with a
# data value paired from select row
# header - np array of the column headers
def print_col_reversed_c(header, row):
    fRow = df.iloc[row].to_numpy()
    for i in reversed(range(len(header))):
        print(header[i] + ' ' + str(fRow[i]))

def debug_stats_helper(read, num_col_df, write, num_col_dest_df, num_col_rmcol, rm_file_name):
    print("\n###########################################################################")
    print("#                                                                         #\n# Columns in,",
             read, ": ", num_col_df, "                    #")
    print("# Columns in reduced csv,", write, ": ", num_col_dest_df, "            #")
    print("# Columns names added: ", abs(num_col_df - (num_col_dest_df + num_col_rmcol)),
             "                                                #")
    print("# Columns reduced: ", num_col_rmcol, "                                                  #")
    print("# Column names removed outputted to: ", rm_file_name, "#\n#                                                                         #")
    print("###########################################################################\n")

if __name__ == "__main__":
    main()

#######################################################################################################################
#                                                     Data Format                                                     #
#######################################################################################################################

# Below are the details of the data you've exported from Health Mate:

# activities.csv: Activities history

# aggregates_calories_earned.csv: Active calories burned regrouped by days

# aggregates_calories_passive.csv: Passive calories burned regrouped by days

# aggregates_distance.csv: Travelled distance regrouped by days

# aggregates_elevation.csv: Floor climbed regrouped by days
# · Value : (steps number)

# aggregates_steps.csv: Steps data regrouped by days
# · Value : (steps number)

# bp.csv: Blood Pressure Data
# · Heart Rate : (bpm)
# · Systolic : (mmHg)
# · Diastolic : (mmHg)

# height.csv: Height Measurements
# · Height : (meters)

# raw_hr_hr.csv: Heart rate data
# · Heart Rate : (bpm)

# raw_tracker_calories-earned.csv: Calories earned data
# · Duration : (seconds)
# · Value : (number of calories)

# raw_tracker_distance.csv: Distance data
# · Duration : (seconds)
# · Value : (meters)

# raw_tracker_elevation.csv: Elevation data
# · Duration : (seconds)
# · Value : (meters)

# raw_tracker_lap-pool.csv: Lap pool data
# · Duration : (seconds)
# · Value : (number of laps)

# raw_tracker_sleep-state.csv: Sleep trackers data
# · Duration : (seconds)
# · Value : (0 -> awake; 1 -> light sleep; 2 -> deep sleep)

# raw_tracker_steps.csv: Steps data
# · Duration : (seconds)
# · Value : (steps number)

# signal.csv: Your ECG signals
# · Frequency: Sampling frequency in Hz
# · Duration: Duration in seconds
# · Wear Position: Position of the device when tracking measurement :
#  - 0 -> right wrist;  1 -> left wrist
#  - 2 -> right arm;  3 -> left arm
# · Signal: Full data set of the ECG recordings
#  - Value in microvolts (μV) for ECG recorded with a watch.
#  - Value in millivolts (mV) for ECG recorded with a blood pressure monitor.

# sleep.csv: Sleep data

# weight.csv: Weights Measurements
# · Weight : Weight (kg)
# · Fat mass : Fat mass (kg)
# · Bone mass : Bone mass (kg)
# · Muscle mass : Muscle mass (kg)
# · Hydration : Hydration (kg)